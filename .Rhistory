prior <- extract.prior(m4.1, n=N) %>%
data.frame()
ggplot(data=prior) +
geom_abline(aes(intercept=a, slope=b)) +
ylim(c(-1,1)) +
xlim(c(0, max(d$W)))
ggplot(data=prior) +
geom_abline(aes(intercept=a, slope=b)) +
ylim(c(-2,2)) +
xlim(c(0, max(d$W)))
# actually fit the model
m4.1 <- quap(
alist(
H ~ dnorm(mu, sigma),
mu <- a + b * W,
a ~ dnorm(0, 0.5),
b ~ dlnorm(0, 0.5),
sigma ~ dexp(1)
), data = d
)
# check if the prior is okay
N = 50
prior <- extract.prior(m4.1, n=N) %>%
data.frame()
ggplot(data=prior) +
geom_abline(aes(intercept=a, slope=b)) +
ylim(c(-2,2)) +
xlim(c(0, max(d$W)))
sample <- extract.samples(m4.1)
str(sample)
mean(sample$b)
precis(sample)
small_sample <- sample[0:100]
small_sample <- sample[0:100, ]
ggplot() +
geom_abline(data=small_sample, aes(intercept=a, slope=b)) +
ylim(c(-2,2)) +
xlim(c(0, max(d$W)))
ggplot() +
geom_abline(data=small_sample, aes(intercept=a, slope=b)) +
geom_point(data=d, aes(W, H)) +
ylim(c(-2,2)) +
xlim(c(0, max(d$W)))
str(d)
d$W
d$H
ggplot() +
geom_abline(data=small_sample, aes(intercept=a, slope=b)) +
geom_point(data=d, aes(W, H)) +
ylim(c(-2,2)) +
xlim(c(0, max(d$W)))
# actually fit the model
m4.1 <- quap(
alist(
H ~ dnorm(mu, sigma),
mu <- a + b * W,
a ~ dnorm(0, 1),
b ~ dlnorm(0, 1),
sigma ~ dexp(1)
), data = d
)
sample <- extract.samples(m4.1)
mean(sample$b)
small_sample <- sample[0:100, ]
ggplot() +
geom_abline(data=small_sample, aes(intercept=a, slope=b)) +
geom_point(data=d, aes(W, H)) +
ylim(c(-2,2)) +
xlim(c(0, max(d$W)))
sample <- extract.samples(m4.1)
mean(sample$b)
small_sample <- sample[0:100, ]
ggplot() +
geom_abline(data=small_sample, aes(intercept=a, slope=b)) +
geom_point(data=d, aes(W, H)) +
ylim(c(-2,2)) +
xlim(c(0, max(d$W)))
str(samples)
samples <- extract.samples(m4.1)
samples <- extract.samples(m4.1)
mean(samples$b)
small_samples <- samples[0:100, ]
ggplot() +
geom_abline(data=small_samples, aes(intercept=a, slope=b)) +
geom_point(data=d, aes(W, H)) +
ylim(c(-2,2)) +
xlim(c(0, max(d$W)))
miss_weight <- c(46.95, 43.72, 64.78, 32.59, 54.63)
pred <- sim(m4.1, missing_weight)
miss_weight <- c(46.95, 43.72, 64.78, 32.59, 54.63)
pred <- sim(m4.1, missing_weight)
missing_weight <- c(46.95, 43.72, 64.78, 32.59, 54.63)
pred <- sim(m4.1, missing_weight)
pred <- sim(fit=m4.1, data=missing_weight)
missing_weight <- list(46.95, 43.72, 64.78, 32.59, 54.63)
pred <- sim(fit=m4.1, data=missing_weight)
raw_list <- c(46.95, 43.72, 64.78, 32.59, 54.63)
ls <- (raw_list - mean(d$weight)) / sd(d$weight)
missing_weight <- list(W = ls)
missing_weight
pred <- sim(fit=m4.1, data=missing_weight)
str(pred)
expected_height <-
apply(pred, 2, mean) %>%
`+`(mean(d$height)) %>%
`*`(sd(d$height))
expected_height
pred
mean(d$height)
expected_height <-
apply(pred, 2, mean) %>%
`*`(sd(d$height)) %>%
`+`(mean(d$height))
expected_height
expected_PI <-
apply(pred, 2, PI) %>%
`*`(sd(d$height)) %>%
`+`(mean(d$height))
exexpected_PI
expected_PI
library(dagitty)
library(dagitty)
d <- dagitty(
"dag{ T -> S -> N}")
plot.dagitty(d)
plot(d)
coordinates(x=c(T=0, S=1, N=2), y=c(T=0, S=0, N=0))
coordinates(d) <- list(x=c(T=0, S=1, N=2), y=c(T=0, S=0, N=0))
plot(d)
d <- dagitty(
"dag{ T -> S
T -> N}")
coordinates(d) <- list(x=c(T=0, S=1, N=2), y=c(T=0, S=0, N=0))
plot(d)
coordinates(d) <- list(x=c(T=1, S=0, N=2), y=c(T=1, S=0, N=0))
plot(d)
coordinates(d) <- list(x=c(T=1, S=0, N=2), y=c(T=-1, S=0, N=0))
plot(d)
T <- rnorm(1000, 20, 5)
library(rethinking)
dens(T)
T
F
T
dist_T <- rnorm(1000, 20, 5)
T <- TRUE
T
F
dist_T
T_sample <- rnorm(1000, 20, 5)
S_sample <- 20 + sapply(n=1, mean=T_sample, sd=5, rnorm)
S_sample <- 20 + sapply( mean=T_sample, rnorm, n=1,, sd=5)
S_sample <- 20 + sapply( mean=T_sample, FUN=rnorm, n=1,, sd=5)
S_sample <- 20 + sapply( X=T_sample, FUN=rnorm, n=1,, sd=5)
S_sample <- 20 + mapply(FUN=rnorm, n=1, mean=T_sample, sd=5)
dens(S_sample)
N_sample <- 10 + mapply(FUN=rnorm, n=1, mean=T_sample, sd=1)
library(rethinking)
for i in seq(1,10){
output_list <- list()
for j in seq(1,40){
d <- runif(j,0,2)
output_list[j] <- d
}
}
for i in seq(1,10){
print(i)
}
for i in seq(1,10):
print(i)
for(i in seq(1,10)){
output_list <- list()
for() j in seq(1,40)){
d <- runif(j,0,2)
output_list[j] <- d
}
}
for(i in seq(1,10)){
output_list <- list()
for( j in seq(1,40)){
d <- runif(j,0,2)
output_list[j] <- d
}
}
output_list
for(i in seq(1,10)){
output_list <- list()
for( j in seq(1,40)){
d <- runif(j,0,2)
output_list[j] <- d
}
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
output_list[1]
str(output_list)
d <- output_list[1]
d[1:20]
d <- output_list[[1]]
d
d[1:20]
mean_total <- list()
for(l in seq(1, length(output_list))){
mean_list <- vector("numeric")
curr_ls <- output_list[[l]]
for(i in seq(length(curr_ls))){
mean_list[i] <- mean(curr_ls[1:i])
}
mean_total[l] <- mean_list
}
mean_total <- list()
for(l in seq(1, length(output_list))){
mean_list <- vector("numeric")
curr_ls <- output_list[[l]]
for(i in seq(length(curr_ls))){
mean_list[[i]] <- mean(curr_ls[1:i])
}
mean_total[[l]] <- mean_list
}
str(mean_total)
mean_total[1][40]
mean_total[1]
mean_total[[1]][40]
mean_total[[2]][40]
mean_total[[3]][40]
mean_total[[4]][40]
plot(mean_total[[1]])
for(d in mean_total){
plot(d)
}
for(d in mean_total){
plot(d, add=TRUE)
}
df <- data.frame(mean_total)
df
str(df)
colnames(df)
str(mean_total)
plot()
for(d in mean_total){
points(d)
}
plot()
for(d in seq(length(mean_total))){
points(mean_total[[d]], pch=d)
}
plot()
for(d in seq(length(mean_total))){
line(mean_total[[d]])
}
plot()
for(d in seq(length(mean_total))){
line(mean_total[[d]])
}
x <- seq(1:40)
plot()
for(d in seq(length(mean_total))){
line(x, mean_total[[d]])
}
x_coord <- seq(1:40)
plot()
for(d in seq(length(mean_total))){
line(x = x_coord, mean_total[[d]])
}
x_coord <- seq(1:40)
plot()
for(d in seq(length(mean_total))){
line(x = x_coord, mean_total[[d]])
}
line(x = x_coord, mean_total[[d]])
points(x = x_coord, mean_total[[d]])
x_coord <- seq(1:40)
plot()
for(d in seq(length(mean_total))){
points(x = x_coord, mean_total[[d]], col=d)
}
plot()
x_coord <- seq(1:40)
plot.new()
for(d in seq(length(mean_total))){
points(x = x_coord, mean_total[[d]])
}
x_coord <- seq(1:40)
plot.new()
for(d in seq(length(mean_total))){
points(mean_total[[d]], color=d)
}
points(mean_total[[d]], col=d)
points(mean_total[[d]], col=d)
mean_total[[1]]
mean_total[[2]]
plot.new()
for(d in seq(length(mean_total))){
points(mean_total[[d]], col=d)
}
for(d in seq(length(mean_total))){
points(mean_total[[d]], col=d)
}
plot()
for(d in seq(length(mean_total))){
points(mean_total[[d]], col=d)
}
plot()
for(d in seq(length(mean_total))){
points(mean_total[[d]])
}
plot.new()
for(d in seq(length(mean_total))){
points(mean_total[[d]])
}
plot.new()
points(mean_total[[d]])
points(mean_total[d])
plot.new()
for(d in seq(length(mean_total))){
points(seq(1,40), mean_total[[d]])
}
points(seq(1,40), mean_total[[d]])
plot.new()
points(seq(1,40), mean_total[[d]])
source('~/Statistical_Rethinking/Chapter7_follow_through.r', echo=TRUE)
source('~/Statistical_Rethinking/Chapter7_follow_through.r', echo=TRUE)
str(d)
expand.grid?
quit
?expand.grid
?sasapply(list, function)
?sapply(list, function)
?sapply
?dnorm
dnorm(1)
dnorm(0)
dnorm(2)
mu.list <- seq(from=150,to=160,length.out=100)
sigma.list <- seq(from=7, to=9, length.out=100)
post <- expand.grid(mu=mu.list, sigma=sigma.list)
post
?dens
library(rethinking)
?dens
?alist
x <- alist(dnorm(mu,sigma))
x
x <- list(dnorm(3,5))
x
x <- alist(dnorm(3,5))
x
??quap
?quap
?optim
?quap
?extract.samples
?map
?var2
# standardize parameters
d$mass_std <- (d$mass - mean(d$mass)) / sd(d$mass)
d$brain_std <- d$brain / max(d$brain)
m7.1 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b * mass_std,
a ~ dnorm(0.5, 1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0,1)
), data = d)
m7.1
?apply
source('~/Statistical_Rethinking/Chapter7_follow_through.r', echo=TRUE)
??var2
r
var2(r)
var(r)
R2_is_bad <- function(quap_fit){
s <- sim(quap_fit, refresh=0)
r <- apply(s,2,mean) - d$brain_std
l - var2(r)/var2(d$brain_std)
}
m7.2 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2,
a ~ dnorm(0.5,1),
b ~ dnorm(0,10),
log_sigma ~ dnorm(0,1)
), data = d, start=list(b=rep(0,2))
)
m7.3 <- quap(
alist(
brain_std ~ dnorm( mu , exp(log_sigma) ),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3,
a ~ dnorm( 0.5 , 1 ),
b ~ dnorm( 0 , 10 ),
log_sigma ~ dnorm( 0 , 1 )
), data=d , start=list(b=rep(0,3)) )
m7.4 <- quap(
alist(
brain_std ~ dnorm( mu , exp(log_sigma) ),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4,
a ~ dnorm( 0.5 , 1 ),
b ~ dnorm( 0 , 10 ),
log_sigma ~ dnorm( 0 , 1 )
), data=d , start=list(b=rep(0,4)) )
m7.5 <- quap(
alist(
brain_std ~ dnorm( mu , exp(log_sigma) ),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4 +
b[5]*mass_std^5,
a ~ dnorm( 0.5 , 1 ),
b ~ dnorm( 0 , 10 ),
log_sigma ~ dnorm( 0 , 1 )
quit
m7.5 <- quap(
alist(
brain_std ~ dnorm( mu , exp(log_sigma) ),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4 +
b[5]*mass_std^5,
a ~ dnorm( 0.5 , 1 ),
b ~ dnorm( 0 , 10 ),
log_sigma ~ dnorm( 0 , 1 )
), data=d , start=list(b=rep(0,5)) )
lppd(m7.1)
library(rethinking)
sppnames <- c("afarensis", "africanus", "habilis", "boisei", "rudolfensis", "ergaster", "sapiens")
brainvolcc <- c(438, 452, 612, 521, 752, 871, 1350)
masskg <- c(37.0, 35.5, 34.5, 41.5, 55.5, 61.0, 53.5)
d <- data.frame(species = sppnames, brain = brainvolcc, mass = masskg)
# standardize parameters
d$mass_std <- (d$mass - mean(d$mass)) / sd(d$mass)
d$brain_std <- d$brain / max(d$brain)
m7.1 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b * mass_std,
a ~ dnorm(0.5, 1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0,1)
), data = d)
set.seed(12)
lppd(m7.1)
log_sum_exp
?sim
m7.1 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b * mass_std,
a ~ dnorm(0.5, 1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0,1)
), data = d)
set.seed(12)
s <- sim(m7.1) # generate prediction
r <- apply(s, 2, mean) - d$brain_std # get residual for each prediction
resid_var <- var2(r) # find out the variance of the residual
outcome_var <- var2(d$brain_std) # find out the variance
1 - resid_var/outcome_var # r^2 is 0.4774589
R2_is_bad <- function(quap_fit){
s <- sim(quap_fit, refresh=0)
r <- apply(s,2,mean) - d$brain_std
l - var2(r)/var2(d$brain_std)
}
m7.2 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2,
a ~ dnorm(0.5,1),
b ~ dnorm(0,10),
log_sigma ~ dnorm(0,1)
), data = d, start=list(b=rep(0,2))
)
m7.3 <- quap(
alist(
brain_std ~ dnorm( mu , exp(log_sigma) ),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3,
a ~ dnorm( 0.5 , 1 ),
b ~ dnorm( 0 , 10 ),
log_sigma ~ dnorm( 0 , 1 )
), data=d , start=list(b=rep(0,3)) )
m7.4 <- quap(
alist(
brain_std ~ dnorm( mu , exp(log_sigma) ),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4,
a ~ dnorm( 0.5 , 1 ),
b ~ dnorm( 0 , 10 ),
log_sigma ~ dnorm( 0 , 1 )
), data=d , start=list(b=rep(0,4)) )
m7.5 <- quap(
alist(
brain_std ~ dnorm( mu , exp(log_sigma) ),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4 +
b[5]*mass_std^5,
a ~ dnorm( 0.5 , 1 ),
b ~ dnorm( 0 , 10 ),
log_sigma ~ dnorm( 0 , 1 )
), data=d , start=list(b=rep(0,5)))
m7.6 <- quap(
alist(
brain_std ~ dnorm( mu, 0.001),
mu <- a + b[1] * mass_std + b[2] * mass_std^2 + b[3] * mass_std^3 + b[4] * mass_std^4 +
b[5] * mass_std^5 + b[6] * mass_std^6,
a ~ dnorm(0.5, 1),
b ~ dnorm(0, 10) ),
data = d, start = list(b=rep(0,6))
)
sapply(list(m7.1, m7.2, m7.3, m7.4, m7.5, m7.6), function(m) sum(lppd(m)))
