prior <- rep(1,20)
?dbinom
# compute likelihood at each value in grid
likelihood <- dbinom(6, 9, prob=p_grid)
likelihood
plot(likelihood)
# compute product of likelihood and prior
unstd_posterior <- likelihood * prior
unstd_posterior
plot(unstd_posterior)
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
posterior
# standardize the posterior, so it sums to 1
posterior <- unstd_posterior / sum(unstd_posterior)
posterior
plot(posterior)
sum(posterior)
plot(p_grid, posterior, type="b")
plot(p_grid, posterior, type="a")
plot(p_grid, posterior, type="b")
plot(p_grid, posterior, type="c")
plot(p_grid, posterior, type="b")
source('~/.active-rstudio-document', echo=TRUE)
plot(p_grid, posterior, type="b")
?ifelse
# define prior; We are using uniform distribution here
# prior <- rep(1,1000)
prior <- ifelse(p_grid < 0.5, 0, 1)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(prior)
# define prior; We are using uniform distribution here
# prior <- rep(1,1000)
# prior <- ifelse(p_grid < 0.5, 0, 1)
prior <- exp(-5*abs(p_grid - 0.5))
prior
plot(prior)
source('~/.active-rstudio-document', echo=TRUE)
?rep
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=100)
# Then compute value of prior
prior <- rep(1, 100)
?dbinom
# calculate likelihood using binomial model
likelihood <- dbinom(8,15)
source('~/Statistical_Rethinking/hw1_Chi.R', echo=TRUE)
plot(posterior)
posterior
source('~/Statistical_Rethinking/hw1_Chi.R', echo=TRUE)
plot(grid, posterior, type="b")
sum(posterior)
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=100)
# Then compute value of prior
prior <- ifelse(grid > 0.5, 2, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
plot(grid, posterior, type="b")
sum(posterior)
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=100)
# Then compute value of prior
prior <- ifelse(grid > 0.5, 2, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(160,200, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
plot(grid, posterior, type="b")
#
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=100)
# Then compute value of prior
prior <- ifelse(grid > 0.5, 2, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(1600,2000, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
plot(grid, posterior, type="b")
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=1000)
# Then compute value of prior
prior <- ifelse(grid > 0.5, 2, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(1600,2000, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
plot(grid, posterior, type="b")
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=100)
# Then compute value of prior
prior <- rep(1, 100)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
plot(grid, posterior, type="b")
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=100)
# Then compute value of prior
prior <- rep(1, 100)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
plot(grid, posterior, type="b")
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=100)
# Then compute value of prior
prior <- ifelse(grid > 0.5, 2, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
plot(grid, posterior, type="b")
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=100)
# Then compute value of prior
prior <- ifelse(grid > 0.7, 1/0.3, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
plot(grid, posterior, type="b")
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=500)
# Then compute value of prior
prior <- ifelse(grid > 0.7, 1/0.3, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
plot(grid, posterior, type="b")
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=500)
# Then compute value of prior
prior <- ifelse(grid > 0.7, 1/0.3, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
plot(grid, posterior, type="b")
prior <- rep(1, 1000)
# the grid does not change
grid <- seq(0,1,length.out=1000)
# we use the uniform distribution as our prior
prior <- rep(1, 1000)
i = 100
# Here is what we varie. We change the number of tosses until it fit our criteria
likelihood <- dbinom(i * 0.7, i, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
which(posterior == max(posterior))
plot(posterior)
center_grid <- grid[center_index]
center_index <- which(posterior == max(posterior))
center_grid <- grid[center_index]
MARGIN_OF_ERR = 0.025
upper_bd <- center_grid + MARGIN_OF_ERR
lower_bd <- center_grid - MARGIN_OF_ERR
upper_bd
lower_bd
center_grid
grid[center_index]
interval_val <- grid[grid > lower_bd && grid < upperbd]
interval_val
grid[grid>lower_bd]
interval_val <- grid[grid > lower_bd && grid < upper_bd]
interval_val
grid>lower_bd
interval_val <- grid[grid > lower_bd & grid < upper_bd]
interval_val
interval_val <- which(grid[grid > lower_bd & grid < upper_bd])
interval_ind <- which(grid > lower_bd & grid < upper_bd)
interval_ind
sum(posterior[which(grid > lower_bd & grid < upper_bd)])
confidence <- sum(posterior[which(grid > lower_bd & grid < upper_bd)])
confidence
# the grid does not change
grid <- seq(0,1,length.out=1000)
# we use the uniform distribution as our prior
prior <- rep(1, 1000)
i = 100
while(i < 1000000){
# Here is what we varie. We change the number of tosses until it fit our criteria
likelihood <- dbinom(i * 0.7, i, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
center_index <- which(posterior == max(posterior))
center_grid <- grid[center_index]
MARGIN_OF_ERR = 0.025
upper_bd <- center_grid + MARGIN_OF_ERR
lower_bd <- center_grid - MARGIN_OF_ERR
confidence <- sum(posterior[which(grid > lower_bd & grid < upper_bd)])
if(confidence >= 0.99){
break
}
i = i + 1
}
i
grid <- seq(0,1,length.out=1000)
# we use the uniform distribution as our prior
prior <- rep(1, 1000)
i = 100
# Here is what we varie. We change the number of tosses until it fit our criteria
likelihood <- dbinom(i * 0.7, i, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
center_index <- which(posterior == max(posterior))
center_grid <- grid[center_index]
MARGIN_OF_ERR = 0.025
upper_bd <- center_grid + MARGIN_OF_ERR
lower_bd <- center_grid - MARGIN_OF_ERR
confidence <- sum(posterior[which(grid > lower_bd & grid < upper_bd)])
if(confidence >= 0.99){
break
}
i = i + 1
confidence
# the grid does not change
grid <- seq(0,1,length.out=1000)
# we use the uniform distribution as our prior
prior <- rep(1, 1000)
i = 100
while(i < 1000000){
# Here is what we varie. We change the number of tosses until it fit our criteria
likelihood <- dbinom(i * 0.7, i, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
center_index <- which(posterior == max(posterior))
center_grid <- grid[center_index]
MARGIN_OF_ERR = 0.025
upper_bd <- center_grid + MARGIN_OF_ERR
lower_bd <- center_grid - MARGIN_OF_ERR
confidence <- sum(posterior[which(grid > lower_bd & grid < upper_bd)])
if(confidence >= 0.99){
break
}
i = i + 1
}
grid <- seq(0,1,length.out=1000)
# we use the uniform distribution as our prior
prior <- rep(1, 1000)
i = 200
# Here is what we varie. We change the number of tosses until it fit our criteria
likelihood <- dbinom(i * 0.7, i, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
center_index <- which(posterior == max(posterior))
center_grid <- grid[center_index]
MARGIN_OF_ERR = 0.025
upper_bd <- center_grid + MARGIN_OF_ERR
lower_bd <- center_grid - MARGIN_OF_ERR
confidence <- sum(posterior[which(grid > lower_bd & grid < upper_bd)])
if(confidence >= 0.99){
break
}
confidence
i
# the grid does not change
grid <- seq(0,1,length.out=1000)
# we use the uniform distribution as our prior
prior <- rep(1, 1000)
i = 200
while(i < 1000000){
# Here is what we varie. We change the number of tosses until it fit our criteria
likelihood <- dbinom(i * 0.7, i, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
center_index <- which(posterior == max(posterior))
center_grid <- grid[center_index]
MARGIN_OF_ERR = 0.025
upper_bd <- center_grid + MARGIN_OF_ERR
lower_bd <- center_grid - MARGIN_OF_ERR
confidence <- sum(posterior[which(grid > lower_bd & grid < upper_bd)])
if(confidence >= 0.99){
break
}
print(i)
i = i + 1
}
# the grid does not change
grid <- seq(0,1,length.out=1000)
# we use the uniform distribution as our prior
prior <- rep(1, 1000)
i = 200
while(i < 1000000){
# Here is what we varie. We change the number of tosses until it fit our criteria
likelihood <- dbinom(i * 0.7, i, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
center_index <- which(posterior == max(posterior))
center_grid <- grid[center_index]
MARGIN_OF_ERR = 0.025
upper_bd <- center_grid + MARGIN_OF_ERR
lower_bd <- center_grid - MARGIN_OF_ERR
confidence <- sum(posterior[which(grid > lower_bd & grid < upper_bd)])
if(confidence >= 0.99){
break
}
print(i)
i <- i + 1
}
# the grid does not change
grid <- seq(0,1,length.out=1000)
# we use the uniform distribution as our prior
prior <- rep(1, 1000)
i = 200
while(i < 1000000){
# Here is what we varie. We change the number of tosses until it fit our criteria
likelihood <- dbinom(as.integer(i * 0.7), i, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
center_index <- which(posterior == max(posterior))
center_grid <- grid[center_index]
MARGIN_OF_ERR = 0.025
upper_bd <- center_grid + MARGIN_OF_ERR
lower_bd <- center_grid - MARGIN_OF_ERR
confidence <- sum(posterior[which(grid > lower_bd & grid < upper_bd)])
if(confidence >= 0.99){
break
}
print(i)
i <- i + 1
}
# the grid does not change
grid <- seq(0,1,length.out=1000)
# we use the uniform distribution as our prior
prior <- rep(1, 1000)
i = 200
while(i < 1000000){
# Here is what we varie. We change the number of tosses until it fit our criteria
likelihood <- dbinom(as.integer(i * 0.7), i, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
center_index <- which(posterior == max(posterior))
center_grid <- grid[center_index]
MARGIN_OF_ERR = 0.025
upper_bd <- center_grid + MARGIN_OF_ERR
lower_bd <- center_grid - MARGIN_OF_ERR
confidence <- sum(posterior[which(grid > lower_bd & grid < upper_bd)])
if(confidence >= 0.99){
break
}
i <- i + 1
}
i
confidence
plot(posterior)
plot(grid, posterior)
i
plot(grid, posterior)
samples <- sample(p_grid, prob=posterior, size=1e4, replace=TRUE)
samples <- sample(grid, prob=posterior, size=1e4, replace=TRUE)
samples
plot(sample)
plot(samples)
hist(samples)
plot(samples, type="b")
den(samples)
dens(samples)
library(tidyverse)
samples_df <-
data_frame(samples)
samples_df <-
tibble(samples)
samples_df
ggplot(samples_df, aes(samples)) +
geom_freqpoly()
ggplot(samples_df, aes(samples)) +
geom_freqpoly(binwidth=0.01)
ggplot(samples_df, aes(samples)) +
geom_freqpoly(binwidth=0.001)
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=500)
# Then compute value of prior
prior <- ifelse(grid > 0.7, 1/0.3, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
sample_df <-
sample(grid, size=1e4, replace=TRUE, prob=posterior) %>%
tibble()
ggplot(sample_df, aes(sample)) %>%
geom_frepoly(binwidth=0.001)
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=500)
# Then compute value of prior
prior <- ifelse(grid > 0.7, 1/0.3, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
sample_df <-
sample(grid, size=1e4, replace=TRUE, prob=posterior) %>%
tibble()
ggplot(sample_df, aes(sample)) %>%
geom_freqpoly(binwidth=0.001)
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=500)
# Then compute value of prior
prior <- ifelse(grid > 0.7, 1/0.3, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
sample_df <-
sample(grid, size=1e4, replace=TRUE, prob=posterior) %>%
tibble()
ggplot(sample_df, aes(sample)) +
geom_freqpoly(binwidth=0.001)
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=500)
# Then compute value of prior
prior <- ifelse(grid > 0.7, 1/0.3, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
sample_df <-
sample(grid, size=1e4, replace=TRUE, prob=posterior) %>%
tibble()
ggplot(sample_df, aes(sample)) +
geom_freqpoly(binwidth=0.001)
sample_df
posterior
sample_df
?tibble
?colnames
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=500)
# Then compute value of prior
prior <- ifelse(grid > 0.7, 1/0.3, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
sample_df <-
sample(grid, size=1e4, replace=TRUE, prob=posterior) %>%
tibble()
colnames(sample_df)[1] <- "Sample"
ggplot(sample_df, aes(sample)) +
geom_freqpoly(binwidth=0.001)
# So, let's try grid with 100 points
grid <- seq(0,1,length.out=500)
# Then compute value of prior
prior <- ifelse(grid > 0.7, 1/0.3, 0)
# calculate likelihood using binomial model, calculate prob at each grid point to find
# an approximation of the likelihood function
likelihood <- dbinom(8,15, grid)
# calculate posterior
posterior_unstd <- likelihood * prior
posterior <- posterior_unstd / sum(posterior_unstd)
sample_df <-
sample(grid, size=1e4, replace=TRUE, prob=posterior) %>%
tibble()
colnames(sample_df)[1] <- "sample"
ggplot(sample_df, aes(sample)) +
geom_freqpoly(binwidth=0.001)
ggplot(sample_df, aes(sample)) +
geom_freqpoly(binwidth=0.01)
ggplot(sample_df, aes(sample)) +
geom_freqpoly(binwidth=0.005)
ggplot(sample_df, aes(sample)) +
geom_freqpoly(binwidth=0.003)
ggplot(sample_df, aes(sample)) +
geom_freqpoly(binwidth=0.006)
?PI
